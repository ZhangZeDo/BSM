<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hltj.api.dao.TBuyOutInfoMapper">
  <resultMap id="BaseResultMap" type="com.hltj.api.domain.TBuyOutInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="customer_id" jdbcType="VARCHAR" property="customerId" />
    <result column="buy_out_date" jdbcType="TIMESTAMP" property="buyOutDate" />
    <result column="stock_code" jdbcType="VARCHAR" property="stockCode" />
    <result column="buy_out_number" jdbcType="INTEGER" property="buyOutNumber" />
    <result column="buy_out_price" jdbcType="DECIMAL" property="buyOutPrice" />
    <result column="buy_out_profit" jdbcType="DECIMAL" property="buyOutProfit" />
    <result column="create_datetime" jdbcType="TIMESTAMP" property="createDatetime" />
    <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
    <result column="update_datetime" jdbcType="TIMESTAMP" property="updateDatetime" />
    <result column="updated_by" jdbcType="VARCHAR" property="updatedBy" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, customer_id, buy_out_date, stock_code, buy_out_number, buy_out_price, buy_out_profit, 
    create_datetime, created_by, update_datetime, updated_by
  </sql>
  <select id="selectByExample" parameterType="com.hltj.api.domain.TBuyOutInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_buy_out_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_buy_out_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_buy_out_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hltj.api.domain.TBuyOutInfoExample">
    delete from t_buy_out_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hltj.api.domain.TBuyOutInfo">
    insert into t_buy_out_info (id, customer_id, buy_out_date, 
      stock_code, buy_out_number, buy_out_price, 
      buy_out_profit, create_datetime, created_by, 
      update_datetime, updated_by)
    values (#{id,jdbcType=INTEGER}, #{customerId,jdbcType=VARCHAR}, #{buyOutDate,jdbcType=TIMESTAMP}, 
      #{stockCode,jdbcType=VARCHAR}, #{buyOutNumber,jdbcType=INTEGER}, #{buyOutPrice,jdbcType=DECIMAL}, 
      #{buyOutProfit,jdbcType=DECIMAL}, #{createDatetime,jdbcType=TIMESTAMP}, #{createdBy,jdbcType=VARCHAR}, 
      #{updateDatetime,jdbcType=TIMESTAMP}, #{updatedBy,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hltj.api.domain.TBuyOutInfo">
    insert into t_buy_out_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="buyOutDate != null">
        buy_out_date,
      </if>
      <if test="stockCode != null">
        stock_code,
      </if>
      <if test="buyOutNumber != null">
        buy_out_number,
      </if>
      <if test="buyOutPrice != null">
        buy_out_price,
      </if>
      <if test="buyOutProfit != null">
        buy_out_profit,
      </if>
      <if test="createDatetime != null">
        create_datetime,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="updateDatetime != null">
        update_datetime,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=VARCHAR},
      </if>
      <if test="buyOutDate != null">
        #{buyOutDate,jdbcType=TIMESTAMP},
      </if>
      <if test="stockCode != null">
        #{stockCode,jdbcType=VARCHAR},
      </if>
      <if test="buyOutNumber != null">
        #{buyOutNumber,jdbcType=INTEGER},
      </if>
      <if test="buyOutPrice != null">
        #{buyOutPrice,jdbcType=DECIMAL},
      </if>
      <if test="buyOutProfit != null">
        #{buyOutProfit,jdbcType=DECIMAL},
      </if>
      <if test="createDatetime != null">
        #{createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDatetime != null">
        #{updateDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hltj.api.domain.TBuyOutInfoExample" resultType="java.lang.Integer">
    select count(*) from t_buy_out_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_buy_out_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.customerId != null">
        customer_id = #{record.customerId,jdbcType=VARCHAR},
      </if>
      <if test="record.buyOutDate != null">
        buy_out_date = #{record.buyOutDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.stockCode != null">
        stock_code = #{record.stockCode,jdbcType=VARCHAR},
      </if>
      <if test="record.buyOutNumber != null">
        buy_out_number = #{record.buyOutNumber,jdbcType=INTEGER},
      </if>
      <if test="record.buyOutPrice != null">
        buy_out_price = #{record.buyOutPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.buyOutProfit != null">
        buy_out_profit = #{record.buyOutProfit,jdbcType=DECIMAL},
      </if>
      <if test="record.createDatetime != null">
        create_datetime = #{record.createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateDatetime != null">
        update_datetime = #{record.updateDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_buy_out_info
    set id = #{record.id,jdbcType=INTEGER},
      customer_id = #{record.customerId,jdbcType=VARCHAR},
      buy_out_date = #{record.buyOutDate,jdbcType=TIMESTAMP},
      stock_code = #{record.stockCode,jdbcType=VARCHAR},
      buy_out_number = #{record.buyOutNumber,jdbcType=INTEGER},
      buy_out_price = #{record.buyOutPrice,jdbcType=DECIMAL},
      buy_out_profit = #{record.buyOutProfit,jdbcType=DECIMAL},
      create_datetime = #{record.createDatetime,jdbcType=TIMESTAMP},
      created_by = #{record.createdBy,jdbcType=VARCHAR},
      update_datetime = #{record.updateDatetime,jdbcType=TIMESTAMP},
      updated_by = #{record.updatedBy,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hltj.api.domain.TBuyOutInfo">
    update t_buy_out_info
    <set>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=VARCHAR},
      </if>
      <if test="buyOutDate != null">
        buy_out_date = #{buyOutDate,jdbcType=TIMESTAMP},
      </if>
      <if test="stockCode != null">
        stock_code = #{stockCode,jdbcType=VARCHAR},
      </if>
      <if test="buyOutNumber != null">
        buy_out_number = #{buyOutNumber,jdbcType=INTEGER},
      </if>
      <if test="buyOutPrice != null">
        buy_out_price = #{buyOutPrice,jdbcType=DECIMAL},
      </if>
      <if test="buyOutProfit != null">
        buy_out_profit = #{buyOutProfit,jdbcType=DECIMAL},
      </if>
      <if test="createDatetime != null">
        create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDatetime != null">
        update_datetime = #{updateDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hltj.api.domain.TBuyOutInfo">
    update t_buy_out_info
    set customer_id = #{customerId,jdbcType=VARCHAR},
      buy_out_date = #{buyOutDate,jdbcType=TIMESTAMP},
      stock_code = #{stockCode,jdbcType=VARCHAR},
      buy_out_number = #{buyOutNumber,jdbcType=INTEGER},
      buy_out_price = #{buyOutPrice,jdbcType=DECIMAL},
      buy_out_profit = #{buyOutProfit,jdbcType=DECIMAL},
      create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
      created_by = #{createdBy,jdbcType=VARCHAR},
      update_datetime = #{updateDatetime,jdbcType=TIMESTAMP},
      updated_by = #{updatedBy,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <resultMap id="DTOResultMap" type="com.hltj.api.dto.BuyOutInfoDTO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="customer_id" jdbcType="VARCHAR" property="customerId" />
    <result column="customer_name" jdbcType="VARCHAR" property="customerName" />
    <result column="buy_out_date" jdbcType="TIMESTAMP" property="buyOutDate" />
    <result column="stock_code" jdbcType="VARCHAR" property="stockCode" />
    <result column="stock_name" jdbcType="VARCHAR" property="stockName" />
    <result column="buy_out_number" jdbcType="INTEGER" property="buyOutNumber" />
    <result column="buy_out_price" jdbcType="DECIMAL" property="buyOutPrice" />
    <result column="buy_out_profit" jdbcType="DECIMAL" property="buyOutProfit" />
    <result column="create_datetime" jdbcType="TIMESTAMP" property="createDatetime" />
    <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
    <result column="update_datetime" jdbcType="TIMESTAMP" property="updateDatetime" />
    <result column="updated_by" jdbcType="VARCHAR" property="updatedBy" />
  </resultMap>

  <select id="selectByBuyOutInfoDTO" resultMap="DTOResultMap" parameterType="com.hltj.api.dto.BuyOutInfoDTO">
    select
    a.id, a.customer_id, b.customer_name,a.buy_out_date, a.stock_code, c.stock_name, a.buy_out_number, a.buy_out_price, a.buy_out_profit,
    a.create_datetime, a.created_by, a.update_datetime, a.updated_by
    from t_buy_out_info a
    left join t_customer b on (a.customer_id = b.customer_id)
    left join t_stock_info c on (a.stock_code = c.stock_code)
    <trim prefix="WHERE" prefixOverrides="AND | OR ">
      <if test="param.customerId !=null and param.customerId !='' ">
        and a.customer_id like CONCAT('%',#{param.customerId},'%')
      </if>
      <if test="param.customerName !=null and param.customerName !='' ">
        and b.customer_name like CONCAT('%',#{param.customerName},'%')
      </if>
    </trim>

    order by create_datetime desc
    <if test="param.startNum >= 0" >
      limit ${param.startNum},${param.pageSize}
    </if>
  </select>
  <select id="selectTotalByBuyOutInfoDTO" resultType="int">
    select count(1)
    from t_buy_out_info a
    <if test="param.customerName !=null and param.customerName !='' ">
      left join t_customer b on (a.customer_id = b.customer_id)
    </if>
    <trim prefix="WHERE" prefixOverrides="AND | OR ">
      <if test="param.customerId !=null and param.customerId !='' ">
        and a.customer_id like CONCAT('%',#{param.customerId},'%')
      </if>
      <if test="param.customerName !=null and param.customerName !='' ">
        and b.customer_name like CONCAT('%',#{param.customerName},'%')
      </if>
    </trim>
  </select>

</mapper>